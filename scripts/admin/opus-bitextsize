#!/usr/bin/env perl
#-*-perl-*-

use strict;
use XML::Parser;
use Getopt::Std;
use OPUS::Tools;
# use CDB_File;


use vars qw/$opt_d/;
getopts('d:');
my $CorpusDir = $opt_d || '.';

my $AlignParser = new XML::Parser(Handlers => {Start => \&AlignTagStart,
					       End => \&AlignTagEnd});

my $AlignHandler = $AlignParser->parse_start;

my $fromDoc = undef;
my $toDoc = undef;
my @links = ();
my $StartOfLinkGrp = undef;
my $EndOfLinkGrp = undef;

my $countLinkGroups = 0;
my $countTUs = 0;
my $countSrcSents = 0;
my $countTrgSents = 0;
my $countSrcWords = 0;
my $countTrgWords = 0;


print STDERR "read sentence alignments\n";
while ( &read_linkgrp($AlignHandler) ){

    if ($AlignHandler->{__NR_OF_TUS__}){
	$countLinkGroups++;
	$countTUs += $AlignHandler->{__NR_OF_TUS__};
	# $countTUs += @links;

	$countSrcSents += scalar keys %{$AlignHandler->{__SRC_SENT_IDS__}};
	$countTrgSents += scalar keys %{$AlignHandler->{__TRG_SENT_IDS__}};

	# if ( exists $AlignHandler->{__NR_OF_SRCWORDS__} ){
	#     $countSrcWords += $AlignHandler->{__NR_OF_SRCWORDS__};
	# }
	# else{
	    print STDERR "count words in linked sentences from $fromDoc\n";
	    $countSrcWords += &count_words($fromDoc, $CorpusDir, $AlignHandler->{__SRC_SENT_IDS__});
	# }

	# if ( exists $AlignHandler->{__NR_OF_TRGWORDS__} ){
	#     $countTrgWords += $AlignHandler->{__NR_OF_TRGWORDS__};
	# }
	# else{
	    print STDERR "count words in linked sentences from $toDoc\n";
	    $countTrgWords += &count_words($toDoc, $CorpusDir, $AlignHandler->{__TRG_SENT_IDS__});
	# }
    }
}

print $countLinkGroups,"\n";
print $countTUs,"\n";
print $countSrcWords,"\n";
print $countTrgWords,"\n";






sub read_linkgrp{
    $EndOfLinkGrp = 0;
    @links = ();
    while (<>){
	eval { $_[0]->parse_more($_); };
	if ($@){
	    print STDERR $_;
	    die $@;
	}
	return 1 if ($EndOfLinkGrp);
    }
    return $EndOfLinkGrp;
}



sub count_words{
    my ($doc,$dir,$links) = @_;

    my $countdoc = $doc;
    $countdoc =~s/\.xml\.gz/.counts.gz/;
    if (-e $dir.'/'.$countdoc){
	print STDERR "read counts from $countdoc\n";
	open F,"gzip -cd < $dir/$countdoc |" || die "cannot read from $dir/$countdoc";
	my $NrOfWords = 0;
	while (<F>){
	    chomp;
	    my ($id,$count) = split(/\t/);
	    if (exists $$links{$id}){
		$NrOfWords += $$links{$id} * $count;
	    }
	}
	close F;
	return $NrOfWords;
    }
    return &count_words_from_xml($doc,$dir,$links);
}

sub count_words_from_xml{
    my ($doc,$dir,$links) = @_;

    my $XmlParser;
    $XmlParser = new XML::Parser(Handlers => { Start => \&XmlStart,
					       End => \&XmlEnd });
    my $XmlHandler = $XmlParser->parse_start;

    $XmlHandler->{__NR_OF_WORDS__} = 0;
    $XmlHandler->{__NR_OF_SENTS__} = 0;
    $XmlHandler->{__SENTIDS__}     = $links || {};

    my $fh;
    die "cannot open $doc!\n" unless (&open_opus_document(\$fh,$dir,$doc));

    my $NrOfSents = scalar(keys %{$links});
    while (defined(my $line = $fh->getline())){
	eval { $XmlHandler->parse_more($line); };
	die $@ if ($@);
	if ($XmlHandler->{__NR_OF_SENTS__} == $NrOfSents){
	    my $NrOfWords = $XmlHandler->{__NR_OF_WORDS__};
	    eval { $XmlHandler->parse_done };
	    return $NrOfWords;
	}
    }
    my $NrOfWords = $XmlHandler->{__NR_OF_WORDS__};
    eval { $XmlHandler->parse_done };
    return $NrOfWords;
}



sub AlignTagStart{
    my ($p,$e,%a)=@_;

    if ($e eq 'linkGrp'){
	$fromDoc = $a{fromDoc};
	$toDoc   = $a{toDoc};
	
	$p->{__NR_OF_TUS__} = 0;
	$p->{__SRC_SENT_IDS__} = {};
	$p->{__TRG_SENT_IDS__} = {};
	# delete $p->{__NR_OF_SRCWORDS__};
	# delete $p->{__NR_OF_TRGWORDS__};


 	# ## check whether we have a database of counts available
	
	# my $fromDocCountDB = $CorpusDir.'/'.$fromDoc;
	# my $toDocCountDB = $CorpusDir.'/'.$toDoc;
	
	# $fromDocCountDB=~s/\.xml\.gz/.cdb/;
	# $toDocCountDB=~s/\.xml\.gz/.cdb/;

	# if (-e $fromDocCountDB){
	#     $p->{__FROM_DOC_DB__} = CDB_File->TIEHASH($fromDocCountDB);
	#     $p->{__NR_OF_SRCWORDS__} = 0;
	# }
	# if (-e $toDocCountDB){
	#     $p->{__TO_DOC_DB__} = CDB_File->TIEHASH($toDocCountDB);
	#     $p->{__NR_OF_TRGWORDS__} = 0;
	# }

    }
    elsif ($e eq 'link'){

	$p->{__NR_OF_TUS__}++;

	my ($s,$t) = split(/\;/,$a{xtargets});
	foreach (split(/\s+/,$s)){
	    $p->{__SRC_SENT_IDS__}->{$_}++;
	    # if (exists $p->{__FROM_DOC_DB__}){
	    # 	if ($p->{__FROM_DOC_DB__}->EXISTS($_)) {
	    # 	    $p->{__NR_OF_SRCWORDS__} += $p->{__FROM_DOC_DB__}->FETCH($_);
	    # 	}
	    # 	else{
	    # 	    print STDERR "cannot find count for source sentence $_!\!\n";
	    # 	}
	    # }
	}
    
	foreach (split(/\s+/,$t)){
	    $p->{__TRG_SENT_IDS__}->{$_}++;
	    # if (exists $p->{__TO_DOC_DB__}){
	    # 	if ($p->{__TO_DOC_DB__}->EXISTS($_)) {
	    # 	    $p->{__NR_OF_TRGWORDS__} += $p->{__TO_DOC_DB__}->FETCH($_);
	    # 	}
	    # 	else{
	    # 	    print STDERR "cannot find count for target sentence $_!\!\n";
	    # 	}
	    # }
	}
    }
}


sub AlignTagEnd{
    $EndOfLinkGrp = 1 if ($_[1] eq 'linkGrp');
}



sub XmlStart{
    my ($p,$e,%a)=@_;
    if ($e eq 's'){
	$p->{__SENTID__} = exists $p->{__SENTIDS__}->{$a{id}};
	$p->{__NR_OF_SENTWORDS__} = 0;
    }
    elsif (($e eq 'w') && $p->{__SENTID__}){
	$p->{__NR_OF_SENTWORDS__}++
    }
}

sub XmlEnd{
    if ($_[1] eq 's'){
	if (exists $_[0]->{__SENTID__}){
	    $_[0]->{__NR_OF_WORDS__} += $_[0]->{__SENTID__}*$_[0]->{__NR_OF_SENTWORDS__};
	    $_[0]->{__NR_OF_SENTS__}++;
	    delete $_[0]->{__SENTID__};
	}
    }
}
